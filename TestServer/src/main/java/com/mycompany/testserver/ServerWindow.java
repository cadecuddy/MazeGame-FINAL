/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.testserver;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author PrinceNiko
 */
public class ServerWindow extends javax.swing.JFrame {
    private ArrayList<ClientHandler> clientList;
    private ArrayList<FutureTask> votes;
    private TreeMap<String, ArrayList<String>> clientHistory;
    private ArrayList<String> currentRound;
    private ArrayList<String> pastRoundVote;
    private MazeBuilder maze;

    /**
     * Creates new form ServerWindow
     */
    public ServerWindow() {
        clientList = new ArrayList<>();
        votes = new ArrayList<>();
        currentRound = new ArrayList<>();
        pastRoundVote = new ArrayList<>();
        clientHistory = new TreeMap<>();
        try {
            maze = new MazeBuilder(11);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Thread thread1 = new Thread(){
            public void run(){
            connectClients();
            }
        }; 
        thread1.start();
        initComponents();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button_Return = new javax.swing.JButton();
        button_gameStart = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button_Return.setText("return");
        button_Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ReturnActionPerformed(evt);
            }
        });

        button_gameStart.setText("Start Game");
        button_gameStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_gameStartActionPerformed(evt);
            }
        });

        jLabel1.setText("Server Port:");

        jScrollPane1.setViewportView(jTextPane1);

        jLabel2.setText("Server IP:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button_Return))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_gameStart)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_gameStart)
                    .addComponent(button_Return))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_ReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ReturnActionPerformed
        for (FutureTask vote : votes){
            try {
                System.out.println(vote.get());
            } catch (InterruptedException ex) {
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            votes.clear();
            for(int i = 0; i < clientList.size(); i++){
                votes.add(new FutureTask(clientList.get(i)));
                Thread thread = new Thread(votes.get(votes.size() - 1));
                thread.start();
            }
        }
    }//GEN-LAST:event_button_ReturnActionPerformed

    private void button_gameStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_gameStartActionPerformed

        Task task = new Task();
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(task, 4000, 4000);
        ServerWindow.this.setVisible(false);
        JFrame f = new JFrame();
        f.setTitle("Maze Game");
        f.add(new GameBoard());
        f.setSize(1200, 800);
        f.setLocationRelativeTo(null);
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
    }//GEN-LAST:event_button_gameStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }

    private void connectClients() {
        try {
            ServerSocket server = new ServerSocket(6666);
            int i = 0;
            while(true){
                Socket s = server.accept();
                
                ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
                ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
                ClientHandler client = new ClientHandler(ois, oos, s, "client #" + i);
                
                clientList.add(client);
                votes.add(new FutureTask(client));
                
                
                Thread thread = new Thread(votes.get(votes.size() - 1));
                thread.start();
                
                i++;
                
            }
        } catch (IOException ex) {
            Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    //Executes the collection of the votes from clients based on a timer
    //Split variable stores two items
    //[0] - vote
    //[1] - client ID
    //All voting information is stored in a TreeMap that will store each clients
    //voting history
    public class Task extends TimerTask{

        @Override
        public void run() {
            for (FutureTask vote : votes){
                try {
                    if (!vote.isDone()){
                        currentRound.add("null");
                    } else{
                        String v = (String) vote.get();
                        String[] split = v.split(" ");
                        
                        currentRound.add(split[0]);
                        if(clientHistory.containsKey(split[1])){
                            clientHistory.get(split[1]).add(split[0]);
                        }
                        else{
                            ArrayList<String> temp = new ArrayList<>();
                            temp.add(split[0]);
                            clientHistory.put(split[1], temp);
                        }
                        
                        
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            calculateWin();
            try {
                maze.movePlayer(pastRoundVote.get(pastRoundVote.size()-1));
                System.out.println(pastRoundVote);
                System.out.println(pastRoundVote.get(pastRoundVote.size()-1));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            currentRound.clear();
            votes.clear();
            for(int i = 0; i < clientList.size(); i++){
                votes.add(new FutureTask(clientList.get(i)));
                Thread thread = new Thread(votes.get(votes.size() - 1));
                thread.start();
            } 
        } 

        private void calculateWin() {
            
        int up = 0;
        int down = 0;
        int left = 0;
        int right = 0;
           for(String s : currentRound){
               switch (s) {
                   case "UP":
                       up++;
                       //System.out.print("up");
                       break;
                   case "LEFT":
                       left++;
                       //System.out.print("left");
                       break;

                   case "DOWN":
                       down++;
                       //System.out.print("down");
                       break;

                   case "RIGHT":
                       right++;
                       //System.out.print("right");
                       break;
               }
        }
        if (up > down && up > left && up > right){
            pastRoundVote.add("UP");
        }
        else if(down > up && down > right && down > left){
            pastRoundVote.add("DOWN");
        }
        else if(left > right && left > up && left > down){
            pastRoundVote.add("LEFT");
        }
        else if(right > up && right > down && right > left){
            pastRoundVote.add("RIGHT");
        }
        /*else if(up == down){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("UP");
            }
            else{
                pastRoundVote.add("DOWN");
            }
            
        }
        else if(up == right){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("UP");
            }
            else{
                pastRoundVote.add("RIGHT");
            }
            
        }
        
        else if(up == left){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("UP");
            }
            else{
                pastRoundVote.add("LEFT");
            }
            
        }
        
        else if(down == left){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("DOWN");
            }
            else{
                pastRoundVote.add("LEFT");
            }
        }
        
        else if(down == right){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("DOWN");
            }
            else{
                pastRoundVote.add("LEFT");
            }  
        }
        
        else if(right == left){
            if((int)Math.random()*10 > 5){
                pastRoundVote.add("RIGHT");
            }
            else{
                pastRoundVote.add("LEFT");
            }  
        }*/
        
        else {
            pastRoundVote.add("null");
        }
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_Return;
    private javax.swing.JButton button_gameStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
    }


